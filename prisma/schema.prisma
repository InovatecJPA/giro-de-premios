// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RaffleEditionStatus {
  pending
  active
  closed
}

enum Profiles {
  suporte
  owner
  influencer
}

enum TicketRaffleStatus {
  bought
  available
  reserved
}

enum ExtractType {
  deposit
  withdrawal
}

model User {
  id           String   @id @default(uuid())
  name         String
  cpf          String   @unique
  number       String
  social_media String?
  saldo        Decimal  @default(0.00) @db.Decimal(10, 2)
  comissao     Decimal  @default(0.00) @db.Decimal(3, 2)
  profile      Profiles
  owner_id     String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  owner     User?  @relation("UserOwnerSub", fields: [owner_id], references: [id])
  sub_users User[] @relation("UserOwnerSub")

  auths           Auth[]
  raffle_editions RaffleEdition[]
  Extract         Extract[]

  @@map("users")
}

model Auth {
  id               String   @id @default(uuid())
  provider         String //Email, Facebook, Google
  password_hash    String?
  provider_user_id String   @unique //Email is saved here when provider = "email"
  is_verified      Boolean  @default(false)
  user_id          String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  User                User                  @relation(fields: [user_id], references: [id])
  ForgotPasswordToken ForgotPasswordToken[]

  @@map("auths")
}

model ForgotPasswordToken {
  id                           String   @id @default(uuid())
  auth_id                      String
  password_reset_token         String   @unique
  password_reset_token_expires DateTime @default(now())
  created_at                   DateTime @default(now())

  authId Auth @relation(fields: [auth_id], references: [id])

  @@map("forgot_password_tokens")
}

model RaffleEdition {
  id               String              @id @default(uuid())
  title            String
  description      String
  status           RaffleEditionStatus @default(pending)
  total_tickets    Int
  winner_tickets   Int
  price            Decimal             @db.Decimal(5, 2)
  raffle_draw_date DateTime
  user_id          String?
  created_at       DateTime            @default(now())
  updated_at       DateTime            @updatedAt

  User         User?          @relation(fields: [user_id], references: [id])
  TicketRaffle TicketRaffle[]
  DiscountRule DiscountRule[]

  @@map("raffle_editions")
}

model Prize {
  id             String   @id @default(uuid())
  prize_name     String
  prize_quantity Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  TicketRaffle TicketRaffle[]

  @@map("prizes")
}

model TicketRaffle {
  id                   String             @id @default(uuid())
  ticket_raffle_number BigInt
  status               TicketRaffleStatus @default(available)
  prize_id             String?
  raffle_edition_id    String
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt

  prize          Prize?          @relation(fields: [prize_id], references: [id])
  raffle_edition RaffleEdition   @relation(fields: [raffle_edition_id], references: [id])
  ticket_payment TicketPayment[] @relation("raffle_ticket_payments")

  @@unique([ticket_raffle_number, raffle_edition_id])
  @@map("ticket_raffles")
}

model TicketPayment {
  id            String   @id @default(uuid())
  cpf           String
  email         String
  name          String
  number        String?
  ticket_amount Int
  discount      Decimal  @db.Decimal(3, 2)
  total_value   Decimal  @db.Decimal(10, 2)
  created_at    DateTime @default(now())

  ticket_raffle TicketRaffle[] @relation("raffle_ticket_payments")
  Extract       Extract[]

  @@map("ticket_payments")
}

model Extract {
  id                String      @id @default(uuid())
  amount            Decimal     @db.Decimal(10, 2)
  type              ExtractType
  ticket_payment_id String?
  user_id           String
  created_at        DateTime    @default(now())
  comissao_user_id  String?

  ticket_payment TicketPayment? @relation(fields: [ticket_payment_id], references: [id])
  user           User           @relation(fields: [user_id], references: [id])

  @@map("extracts")
}

model DiscountRule {
  id                String  @id @default(uuid())
  min_tickets       Int
  discount_value    Decimal @db.Decimal(3, 2)
  raffle_edition_id String

  RaffleEdition RaffleEdition @relation(fields: [raffle_edition_id], references: [id])

  @@map("discount_rules")
}

// model PrizeRoulette {}
// model PaymentTransaction {}\
